# -*- coding: utf-8 -*-
"""tryfinalmodel5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dH7ep83lNEav6p0jOdPVWphStWNkSS4L
"""

!pip install flask-ngrok

from google.colab import files
uploaded = files.upload()

from flask import Flask, request, jsonify
from flask_ngrok import run_with_ngrok
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import os

# Initialize Flask app
app = Flask(__name__)
run_with_ngrok(app)  # Start ngrok when the app is run

# Load the trained model
model = load_model('solar_panel_modeltry.h5')

# Define class names
class_names = ['Bird-drop', 'Clean', 'Dusty', 'Electrical-damage', 'Physical-Damage', 'Snow-Covered']

# Ensure upload directory exists
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Preprocess the image before feeding it into the model
def preprocess_image(img_path, target_size=(224, 224)):
    img = image.load_img(img_path, target_size=target_size)
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    img_array = img_array / 255.0  # Normalize to [0, 1]
    return img_array

# Define a route for health check
@app.route('/', methods=['GET'])
def home():
    return jsonify({'message': 'Solar Panel Fault Classification API is running!'}), 200

# Define a route for prediction
@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify({'error': 'No file uploaded'}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400

    # Save the uploaded file temporarily
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(file_path)

    try:
        # Preprocess the image and make a prediction
        img_array = preprocess_image(file_path)
        predictions = model.predict(img_array)
        predicted_class_index = np.argmax(predictions, axis=1)[0]
        predicted_class = class_names[predicted_class_index]
        confidence = float(predictions[0][predicted_class_index])

        # Clean up the uploaded file
        os.remove(file_path)

        # Return the prediction
        return jsonify({
            'predicted_class': predicted_class,
            'confidence': confidence
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500

# Run the Flask app
if __name__ == '__main__':
    app.run()